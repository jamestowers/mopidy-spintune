// Generated by CoffeeScript 1.7.1
(function() {
  this.Spintune = (function() {
    function Spintune() {
      this.$doc = $(document);
      this.ready = false;
      this.mopidy = new Mopidy({
        callingConvention: 'by-position-or-by-name'
      });
      this.libraries = [];
      this.playlist = new Playlist();
      this.init();
    }

    Spintune.prototype.init = function() {
      console.log('[Spintune] init()');
      this.mopidy.on("state:online", (function(_this) {
        return function() {
          console.log('[Spintune] Mopidy online');
          return _this.onReady();
        };
      })(this));
      this.mopidy.on("state:offline", function() {
        return console.log('[Spintune] Mopidy offline');
      });
      this.mopidy.on("reconnectionPending", function() {
        return console.log('[Spintune] Mopidy pending connection');
      });
      this.mopidy.on("reconnecting", function() {
        return console.log('[Spintune] Mopidy reconnecting');
      });
      this.mopidy.on("event:trackPlaybackStarted", function() {
        console.log('[Spintune] Playing new song');
        return player.showCurrentTrack();
      });
      this.$doc.on('click', '.song', function() {
        player.handleClick(this);
        return false;
      });
      return this.$doc.on('click', 'a.album-name', function() {
        player.getAlbumTracks(this.href);
        return false;
      });
    };

    Spintune.prototype.onReady = function() {
      this.ready = true;
      this.showCurrentTrack();
      this.getLibraries();
      return this.getLibraryTracks('spotify:toplist:current');
    };

    Spintune.prototype.handleClick = function(e) {
      return this.playlist.set(e.href);
    };

    Spintune.prototype.trackInfo = function(track) {
      return 'Now playing: <a href="' + track.uri + '" class="track-name">' + track.name + '</a> by <a href="' + track.artists[0].uri + '" class="artist-name">' + track.artists[0].name + '</a> from <a href="' + track.album.uri + '" class="album-name">' + track.album.name + '</a>';
    };

    Spintune.prototype.showCurrentTrack = function() {
      return this.mopidy.playback.getCurrentTrack().then(function(track) {
        return $('.playing-bar').html(player.trackInfo(track));
      });
    };

    Spintune.prototype.play = function(url) {
      return this.mopidy.playback.play().then(function() {});
    };

    Spintune.prototype.stop = function() {
      console.log('[Spintune] stopping');
      return this.mopidy.playback.stop([true]);
    };

    Spintune.prototype.next = function() {
      return this.mopidy.playback.next();
    };

    Spintune.prototype.getLibraries = function() {
      return this.mopidy.library.browse({
        'uri': null
      }).then(function(data) {
        return $.each(data, function(i, e) {
          return player.libraries[e.name] = {
            'uri': e.uri,
            'type': e.type
          };
        });
      });
    };

    Spintune.prototype.getLibraryTracks = function(rootDir) {
      return this.mopidy.library.browse({
        'uri': rootDir
      }).then(this.printTrackList, console.error);
    };

    Spintune.prototype.getAlbumTracks = function(uri) {
      var albumId;
      this.mopidy.library.browse({
        'uri': uri
      }).then(this.printTrackList, console.error);
      albumId = uri.substr(uri.lastIndexOf(":") + 1);
      return this.getSpotifyArtwork(albumId, this.showArtwork);
    };

    Spintune.prototype.showArtwork = function(imgData) {
      var html;
      console.log(imgData);
      html = '<div class="thumb artwork" id="album-artwork"><img src="' + imgData.url + '" /></div>';
      return $(html).insertBefore('#tracklist');
    };

    Spintune.prototype.printTrackList = function(resultArr) {
      var html, i;
      if (!resultArr || resultArr === '' || resultArr.length === 0) {
        return console.log('No tracks found');
      } else {
        html = '';
        $('#tracklist').empty();
        i = 0;
        while (i < resultArr.length) {
          if (resultArr[i].type === 'track') {
            html += '<li><a href="' + resultArr[i].uri + '" data-url="' + resultArr[i].uri + '" class="song"><span class="song-name"> ' + resultArr[i].name + '</span></a></li>';
          } else {
            console.log('It\'s a directory');
          }
          i++;
        }
        return $('#tracklist').html(html);
      }
    };

    Spintune.prototype.getSpotifyArtwork = function(albumId, cb) {
      return $.ajax({
        url: 'https://api.spotify.com/v1/albums/' + albumId,
        dataType: 'json',
        processData: false,
        success: function(data) {
          return cb(data.images[0]);
        },
        error: function(error) {
          return console.log(error);
        }
      });
    };

    Spintune.prototype.getCurrentTrack = function() {
      return this.mopidy.playback.getCurrentTrack({}).then(function(data) {
        console.log(data);
        return data;
      });
    };

    Spintune.prototype.powerDown = function() {
      this.mopidy.close();
      this.mopidy.off();
      return this.mopidy = null;
    };

    return Spintune;

  })();

}).call(this);
